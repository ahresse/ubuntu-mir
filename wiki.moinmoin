||<tablestyle="float:right; font-size: 0.9em; width:30%; background:#F1F1ED; background-repeat: no-repeat; background-position:  98% 0.5ex; margin: 0 0 1em 1em; padding: 0.5em;"><<TableOfContents>>||

== Introduction ==

Packages in Ubuntu main (and restricted) are officially maintained, supported and recommended by the Ubuntu project. Security updates are provided for them as necessary by Canonical, and Canonical's standard support services apply to these packages.

Therefore, special consideration is necessary before adding new packages to these components.
The [[https://launchpad.net/~ubuntu-mir|Ubuntu MIR Team]] reviews packages for promotion from universe to main.

That is the ''Main Inclusion Review'' => MIR

=== Process states ===

This is supposed to be an overview of MIR bug status (as there was enough confusion in the past).
Especially to make clear who's turn it is to act next on a MIR bug.

|| 1. New/Confirmed (unassigned)|| Bug is new for the MIR team to dispatch it to a MIR Team member||
|| 2. New/Confirmed (assigned)|| on the TODO list of the assigned MIR team member||
|| 3. New/Confirmed (assigned to Security)|| on the TODO list of the Security Team||
|| 4. In Progress (any)|| MIR team ack (and if needed Security Team ack) done, but now needs the Dependency/Seed change to happen to pull it into Main||
|| 5. Fix Committed (any)|| All of the above done, waiting for an AA to promote the packages||
|| 6. Fix Released (any)|| Case resolved by an AA||
|| 7. Incomplete (any)|| Questions/Requests were raised for the bug reporter to resolve/clarify||
|| 8. Won't Fix (any)|| Final Nack or given up by the bug reporter||
|| 9. Invalid (any)|| No Feedback for a while when in incomplete status||

{{{
          Answered       +-7----------+     No feedback        +-9-------+
      +------------------+ Incomplete +------------------------> Invalid |
      |   old assign can | any        <--------------------+   | any     |
      |   be kept as-is  +-----^------+                    |   +---------+
      |                        |    question               |
      |                        |                           |
+-1---v-------+  Triage  +-2---+----+ Security needed  +-3-+------------------+
|  New/Conf   +--------->+ New/Conf +----------------->+ New/Conf             |
| unassigned  |          | assigned |                  | assigned to Security |
+-------------+          +-+--+--+--+                  +-+--+--+--------------+
                           |  |  |    +-8-----------+    |  |  |
                           |  |  +----> Won't Fix   <----+  |  |
                           |  |   Nack| any         | Nack  |  |
                           |  |       +-------------+       |  |
                           |  |                             |  |
                           |  |       +-4-----------+       |  |
                           |  +-------> In Progress <-------+  |
                           |    Ack   | any         |  Ack     |
                           |          +-------------+          |
                           |             |Change that pulls    |
                           |             |into Main            |
+-6------------+           |         +-5-v-----------+         |
| Fix Released |           +---------> Fix Committed <---------+
| any          <---------------------+ any           |
+--------------+  AA promotes        +---------------+
}}}

Note1: Since many people set things to confirmed once they are sure it "exists" all too often bugs get set to confirmed. Since confirmed does not have any meaning for our process we will handle new<->confirmed as if the'y be the same.

Note2: All other combinations are undefined and should be fixed up to one of the defined states

== Exceptions ==

=== Font Packages ===

Fonts packages given that fonts are just data, there's no way for them to trip any of the problems that would cause us to not want to support it. Therefore not all of the process has to be followed for these.
Unfortunately there were cases where src:font-* packages contained way more than just a font - due to that either the MIR Team (if a MIR bug was filed) or the Ubuntu-Archive team (on promoting it) has to do a spot check that neither the source nor the created binary packages violate these assumptions.

The only limitation is that the package needs a valid team subscriber before being promoted by an archive admin - just in case anything might come up later.
The MIR Team should try to clarify that with the Team that owns the depending package to own the font as well (read: without the overhead of a full MIR process).

== Filing a MIR bug ==

The steps of the MIR process require a reporter (the one who wants a package promoted) a MIR team member (who does the review) and potentially a Security team member (for an extra review).

The MIR-bug reporter is expected to:

 1. Thoroughly go through TODO/RULE entries in [[#Main_Inclusion_requirements|Ubuntu Main Inclusion RULEs and TODOs]], check that the package meets all the points there. If this package has nontrivial problems, it is not eligible for main inclusion, and needs to be fixed first.
  1. Write down issues that violate the requirements and list them in the MIR bug
  1. Write down all positive checks that you did as well (not only the issues)
 1. File a bug report about the package, titled "[MIR] sourcepackagename".
  1. use below template from [[#Main_Inclusion_requirements|Ubuntu Main Inclusion RULEs and TODOs]]
  1. For each rule include a positive or negative statment as confirmation that you checked each requirement carefully.
  1. For any rule violations ensure to explain why it should be ok for this case.
 1. Subscribe `ubuntu-mir` to the bug report (do not assign it to anyone!), so that it appears in the [[https://bugs.launchpad.net/ubuntu/?field.searchtext=&orderby=-date_last_updated&field.status%3Alist=NEW&assignee_option=none&field.assignee=&field.subscriber=ubuntu-mir|MIR bug list]].
 1. The [[https://launchpad.net/~ubuntu-mir|MIR team]] reviews the reports, and sets acceptable ones to ''In Progress'' or ''Fix Committed''. They might also delegate portions of the review to other teams, by assigning it to them; common cases are getting a thorough security review from the [[https://launchpad.net/~ubuntu-security|security team]] (please see [[SecurityTeam/Auditing|SecurityTeam/Auditing]] for details on requesting an audit and the [[https://trello.com/b/HvFhIQpv/security-team|security team trello board]] (private board; Reviews lane) for prioritized list of MIR security reviews), or getting a sign-off from particular team leads about maintenance commitments.
  1. In the case where an MIR needs a security review, a normal MIR review will happen by a member of the MIR team and the security review by a member of the security team. Among these team members, whoever does the last review shall adjust the bug status accordingly. For instance, if MIR team says ok then security says ok, the security team member should mark the bug as Fix Committed (see above for other statuses).
  1. In case the MIR Team (or later other reviewers) identify tasks that need to be done the bug is set to "incomplete" to reflect that is back on the reporter to drive that forward before more progress can be made. Common Examples are "please add an automated test" or "this needs the new version"
1. The submitter should then take responsibility for adding the package to the seeds as per SeedManagement or adding a dependency to it from another package that already is in `main`. The package will not be moved to main automatically, but will show up in the [[http://people.ubuntu.com/~ubuntu-archive/component-mismatches.txt|component-mismatches]] list, or if the dependency is only in proposed, the [[http://people.canonical.com/~ubuntu-archive/component-mismatches-proposed.txt|component-mismatches-proposed]] list.
 1. Archive administrators will review the component-mismatches output, and for each package waiting to move into `main`, look for a corresponding [[https://bugs.launchpad.net/~ubuntu-mir/+subscribedbugs|bug]].
 1. The archive administrators will promote approved packages to `main` if some other package or the seeds want it (see [[http://people.ubuntu.com/~ubuntu-archive/component-mismatches.txt|component-mismatches output]]) and the package in question has an owning team subscribed to it.

Notes:

 * MIR bugs should always be named for SOURCE packages, not binary packages
 * New binary packages from existing source packages, where the source package is already in main, do not require MIR bugs.
 * If a new source package contains only code which is already in main (e.g. the result of a source package split or rename, or source packages with a version in the name), it may not need a full review. Submitting a MIR bug with an explanation (but without the full template) or updating/extending on the existing old MIR bug and re-opening it by setting it to "NEW" is sufficient.

=== Templates and Rules ===

It is the task of the reporter/reviewer to evaluate all the entries listed in
''RULE'' sections and based ob that to adapt all ''TODO'' entries to create
the initial MIR request and/or the review feedback.

The sum of ''RULE'' sections is not meant to be complete without the ''TODO''
entries. Only combined they define the full rules as that allows to avoid
duplication.
On one hand The ''TODO'' entries shall cover everything we expect from a report.
These shall help to create a concise yet complete report/review.
On the other hand the ''RULE'' entries provide additional background, details,
options and interpretation help.

The reporter/reviewer is asked to use the templates the following way:

 0. Copy the full template below into an editor of your choice
 0. Read the lines starting with ''RULE'' for all aspects of the MIR
 0. For each related line marked with ''TODO''
  0. Adapt the line to provide the correct answer matching the package(s) that you request.
  0. In some of those lines you'll need to replace placeholders '<TBD>' with whatever matches your request
  0. Remove the ''TODO'' prefix
  0. Sometimes mutually exclusive options are provided like "link to CVE" or "no security issues in the past", leave only those statements that apply
 0. Remove the lines starting with ''RULE'' after you have processed them
 0. Eventually all you will have left are the categories Availability, Rationale, ... and the therin the answers that the MIR process expects
 0. You can and are encouraged to always add more details/background that make the case comprehensible
 0. Post
  0. File the MIR bug with this content as the bug description or..
  0. Add a comment to the bug that contains the review in place (not as attachment)


=== Main Inclusion requirements  ===

Use this template for the MIR bug report that you will file.

Usage follows [[#Templates_and_Rules|Templates and Rules]].

The package must fulfill the following requirements.

{{{
[Availability]
RULE: The package must already be in the Ubuntu universe, and must build for
RULE: the architectures it is designed to work on.

TODO: The package <TBD> is already in Ubuntu universe
TODO: Link to package [[https://launchpad.net/ubuntu/+source/<TBD>|<TBD>]]

[Rationale]
RULE: There must be a certain level of demand for the package, for example:
RULE: - The package is useful for a large part of our user base.
RULE: - The package is a new runtime dependency of a package that we already
RULE:   support (build-dependencies can stay in universe).
RULE: - The package helps meet a specific Blueprint/Roadmap goal.
RULE: - The package replaces another package we currently support and promises
RULE:   higher quality and/or better features, so that we can drop the old
RULE:   package from the supported set.

TODO: The package <TBD> is required in Ubuntu main for <TBD>
TODO: Addtional reasons <TBD>
TODO: New use-cases are <TBD>
TODO: Package <TBD> covers the same user case as <TBD>, but is better
TODO: because <TBD>

[Security]
RULE: The security history and the current state of security issues in the
RULE: package must allow us to support the package for at least 9 months (120
RULE: for LTS+ESM support) without exposing its users to an inappropriate level
RULE: of security risks. This requires checking of several things:
RULE: - Check how many vulnerabilities the package had in the past and how they
RULE:   were handled by upstream and the Debian/Ubuntu package:
RULE:   - Search in the National Vulnerability Database using the PKG as keyword
RULE:     http://cve.mitre.org/cve/search_cve_list.html
RULE:   - check OSS security mailing list (feed into search engine
RULE:     'site:www.openwall.com/lists/oss-security <pkgname>')
RULE:   - Ubuntu CVE Tracker
RULE:     - http://people.ubuntu.com/~ubuntu-security/cve/main.html
RULE:     - http://people.ubuntu.com/~ubuntu-security/cve/universe.html
RULE:     - http://people.ubuntu.com/~ubuntu-security/cve/partner.html
RULE: - Check for security relevant binaries. If any are present, this requires
RULE:   a more in-depth security review.
RULE:   - Executables which have the `suid` or `sgid` bit set.
RULE:   - Executables in `/sbin`, `/usr/sbin`.
RULE:   - Add-ons and plugins to security-sensitive software (filters, scanners,
RULE:     UI skins, etc)
RULE: - Check for security relevant behavior. If any is present, this requires
RULE:   a more in-depth security review.
RULE:   - Packages which install services / daemons (`/etc/init.d/*`,
RULE:     `/etc/init/*`, `/lib/systemd/system/*`)
RULE:   - Packages which open privileged ports (ports < 1024).

TODO: - <TBD> security issues in the past
TODO: - <TBD> links to such security issues in trackers
TODO: - <TBD> to any context that shows how these issues got handled in the past
TODO: - No CVEs in this software in the past
TODO: - no `suid` or `sgid` binaries
TODO: - no executables in `/sbin` and `/usr/sbin`
TODO: - Binary <TBD> in sbin is no problem because <TBD>
TODO: - Package does not install services
TODO: - Package installs services, but they are safe because <TBD> (reduced
TODO:   permissions, tmp env, restricted user, ...)
TODO: - Packages does not open privileged ports (ports < 1024)
TODO: - Packages does not contain plugins to security-sensitive software

[Quality assurance]
RULE: - After installing the package it must be possible to make it working with
RULE:   a reasonable effort of configuration and documentation reading.
RULE: - The package must not ask debconf questions higher than medium if it is
RULE:   going to be installed by default. The debconf questions must have
RULE:   reasonable defaults.
RULE: - There are no long-term outstanding bugs which affect the usability of
RULE:   the program to a major degree. To support a package, we must be
RULE:   reasonably convinced that upstream supports and cares for the package.
RULE: - The status of important bugs in [[http://bugs.debian.org|Debian's]],
RULE:   [[https://bugs.launchpad.net/ubuntu|Ubuntu's]], and upstream's bug
RULE:   tracking systems must be evaluated. Important bugs must be pointed out
RULE:   and discussed in the MIR report.
RULE: - The package is maintained well in Debian/Ubuntu
RULE: - The package should not deal with exotic hardware which we cannot
RULE:   support.
RULE: - The package must include a non-trivial test suite, and if there is no
RULE:   obvious reason why it cannot work during build (e.g. it needs root
RULE:   privileges or network access), it should be run during package build,
RULE:   and a failing test suite should fail the build. The package should, but
RULE:   is not required to, also contain non-trivial autopkgtest(s).
RULE:   - If no build tests nor autopkgtests are included, and/or if the package
RULE:     requires specific hardware to perform testing, the subscribed team
RULE:     must provide a written test plan in a comment to the MIR bug, and
RULE:     commit to running that test either at each upload of the package or
RULE:     at least once each release cycle. In the comment to the MIR bug,
RULE:     please link to the codebase of these tests (scripts or doc of manual
RULE:     steps) and attach a full log of these test runs. This is meant to
RULE:     assess their validity (e.g. not just superficial)
RULE: - In some cases a solution that is about to be promoted consists of
RULE:   several very small libraries and one actual application uniting them
RULE:   to achieve something useful. This is rather common in the go/rust space.
RULE:   In that case often these micro-libs on their own can and should only
RULE:   provide low level unit-tests. But more complex autopkgtests make no
RULE:   sense on that level. Therefore in those cases one might want to test on
RULE:   the solution level.
RULE:   - Process wise MIR-requesting teams can ask (on the bug) for this
RULE:     special case to apply for a given case, which reduces the test
RULE:     constraints on the micro libraries but in return increases the
RULE:     requirements for the test of the actual app/solution.
RULE:   - Since this might promote micro-lib packages to main with less than
RULE:     the common level of QA any further MIRed program using them will have
RULE:     to provide the same amount of increased testing.
RULE: - The package uses a debian/watch file whenever possible. In cases where
RULE:   this is not possible (e.g. native packages), the package should either
RULE:   provide a debian/README.source file or a debian/watch file (with
RULE:   comments only) providing clear instructions on how to generate the
RULE:   source tar file.
RULE: - It is often useful to run `lintian --pedantic` on the package to spot
RULE:   the most common packaging issues in advance
RULE: - The package should not rely on obsolete or about to be demoted packages.
RULE:   That currently includes package dependencies on Python2 (without
RULE:   providing Python3 packages), and packages depending on GTK2.

TODO: - The package works well right after install
TODO: - The package needs post install configuration, that is for <TBD>
TODO: - The package will be installed by default, but does not ask debconf
TODO:   questions higher than medium
TODO: - The package will not be installed by default
TODO: - The package is maintained well in Debian/Ubuntu and has not too many and
TODO:   no critical bugs open
TODO:   - Ubuntu https://bugs.launchpad.net/ubuntu/+source/<TBD>/+bug
TODO:   - Debian https://bugs.debian.org/cgi-bin/pkgreport.cgi?src=<TBD>
TODO: - Important open bugs are <TBD>
TODO: - The package does not deal with exotic hardware
TODO: - The package runs a test suite on build time, link to build log <TBD>
TODO: - The package does not run a test at build time because <TBD>
TODO: - The package runs an autopkgtest, link to test log <TBD>
TODO: - The package does not run an autopkgtest because <TBD>
TODO: - The package can not be tested at build or autopktest time because <TBD>
TODO:   to make up for that here <TBD> is a test plan/automation and example
TODO:   test <TBD> (logs/scripts)
TODO: - This package is minimal and will be tested in a more wide reaching
TODO:   solution context <TBD>, details about this testing are here <TBD>
TODO: - debian/watch is present and works
TODO: - debian/watch is not present, instead it has <TBD>
TODO: - This package does not yield massive lintian Warnings, Errors
TODO: - Link to recent build log including a lintian run <TBD>
TODO: - This package does not rely on obsolete or about to be demoted packages.
TODO: - This package has no python2 or GTK2 dependencies

[UI standards]
RULE: - Generally those are only for end-user-facing applications
RULE:   End-user applications must be internationalized (translatable), using
RULE:   the standard intltool/gettext build and runtime system and produce a
RULE:   proper PO template during build.
RULE: - End-user applications must ship a standard conformant desktop file.

TODO: Application is not end-user facing (does not need translation)
TODO: Translation is present, see <TBD>

[Dependencies]
RULE: - All binary dependencies (including `Recommends:`) must be satisfiable in
RULE:   main (i. e. the preferred alternative must be in main). If not, these
RULE:   dependencies need a separate MIR report (this can be a separate bug or
RULE:   another task on the main MIR bug)

TODO: - No further dependencies that are not yet in main
TODO: - There are further dependencies that are not yet in main, MIR for them is
TODO:   at <TBD>

[Standards compliance]
RULE: The package should meet the standards for:
RULE:   - [[https://refspecs.linuxfoundation.org/fhs.shtml|FHS]]
RULE:   - [[http://www.debian.org/doc/debian-policy/|Debian Policy]]
RULE: - Major violations should be documented and justified. Also, the source
RULE: - packaging should be reasonably easy to understand and maintain.

TODO: - This package correctly follows FHS and Debian Policy
TODO: - This package violates FHS or Debian Polciy, reasons for that are <TBD>
TODO: - Packaging and build is easy, <TBD> link to d/rules
TODO: - Packaging is complex, but that is ok because <TBD>

[Maintenance]
RULE: The package must have an acceptable level of maintenance corresponding
RULE: to its complexity:
RULE: - All packages must have a designated "owning" team, regardless of
RULE:   complexity, which is set as a package bug contact. This is not a
RULE:   requirement for the MIR team ACK, but for the package to be promoted
RULE    by an archive admin. Still, it is strongly suggested to subscribe,
RULE:   as the owning team will get a preview of the to-be-expected incoming
RULE:   bugs later on.
RULE: - Simple packages (e.g. language bindings, simple Perl modules, small
RULE:   command-line programs, etc.) might not need very much maintenance
RULE:   effort, and if they are maintained well in Debian we can just keep them
RULE:   synced. They still need a subscribing team to handle bugs, FTBFS and
RULE:   tests
RULE: - More complex packages will usually need a developer or team of
RULE:   developers paying attention to their bugs, whether that be in Ubuntu
RULE:   or elsewhere (often Debian). Packages that deliver major new headline
RULE:   features in Ubuntu need to have commitment from Ubuntu developers
RULE:   willing to spend substantial time on them.

TODO: Owning Team will be <TBD>
TODO: Team is already subscribed to the package

RULE: - Responsibilities implied by static builds promoted to main, which is
RULE:   not a recommended but a common case with golang packages.
RULE:   - the security team will track CVEs for all golang packages in main
RULE:   - the security team will provide updates to main for all `golang-*-dev`
RULE:     packages
RULE:   - the security team will provide updates to main for golang applications
RULE:     whose non-vendored source code is affected as per normal procedures
RULE:     (including e.g., sponsoring/coordinating uploads from teams/upstream
RULE:     projects, etc)
RULE:   - the security team will perform no-change-rebuilds for all packages
RULE:     Built-Using `golang-*-dev` packages it has provided, and coordinate
RULE:     testing with the owning teams responsible for the rebuilt packages
RULE:   - for packages that build using any `golang-*-dev` packages:
RULE:     - the owning team must state their commitment to test
RULE:       no-change-rebuilds triggered by a dependent library/compiler and to
RULE:       fix any issues found for the lifetime of the release (including ESM
RULE:       when included)
RULE:     - the owning team must provide timely testing of no-change-rebuilds
RULE:       from the security team, fixing the rebuilt package as necessary
RULE:   - for packages that build with approved vendored code:
RULE:     - the owning team must state their commitment to provide updates to
RULE:       the security team for any affected vendored code for the lifetime of
RULE:       the release (including ESM when included)
RULE:     - the security team will alert the owning team of issues that may
RULE:       affect their vendored code
RULE:     - the owning team will provide timely, high quality updates for the
RULE:       security team to sponsor to fix issues in the affected vendored code

TODO: - This does not use static builds
TODO: - The team <TBD> is aware of the implications by a static build and
TODO:   commits to test no-change-rebuilds and to fix any issues found for the
TODO:   lifetime of the release (including ESM)
TODO: - This does not use vendored code
TODO: - The team <TBD> is aware of the implications of vendored code and (as
TODO:   alerted by the security team) commits to provide updates to the security
TODO:   team for any affected vendored code for the lifetime of the release
TODO:   (including ESM).


[Background information]
RULE: - The package descriptions should explain the general purpose and context
RULE:   of the package. Additional explanations/justifications should be done in
RULE:   the MIR report.
RULE: - If the package was renamed recently, or has a different upstream name,
RULE:   this needs to be explained in the MIR report.

TODO: The Package description explains the package well
TODO: Upstream Name is <TBD>
TODO: Link to upstream project <TBD>
TODO: <TBD> (any further background that might be helpful
}}}

== Reviewing a bug ==

This section is a guideline for the review by the [[https://launchpad.net/~ubuntu-mir|MIR Team]].

Usage follows [[#Templates_and_Rules|Templates and Rules]].

The Intent is to answer the primary decision '''"Will this package be well maintained in main?"'''

By default statements are in the ''OK'' section, but issues that need to be addressed should go to the ''Problem:'' sections (and briefly the summary at the top).

{{{
[Summary]
TODO: WRITE - <TBD> The essence of the review result from the MIR POV
TODO: MIR team ACK
TODO: MIR team NACK
TODO: This does need a security review, so I'll assign ubuntu-security
TODO: List of specific binary packages to be promoted to main: <TBD>

Notes:
TODO: - add todos, issues or special cases to discuss
Required TODOs:
TODO: - TBD
Recommended TODOs:
TODO: - The package should get a team bug subscriber
TODO: - TBD

[Duplication]
RULE: - One easy way to avoid the burden of maintaining the package is to not
        use it in the first place!  If a package is pulling in some random jpeg
        parsing library that needs a MIR, maybe it makes more sense to patch the
        package to just use libjpeg instead.  Keep an eye out for duplicated
        functionality in main, since that makes bug fixing and security
        reviewing that much harder.

TODO: There is no other package in main providing the same functionality.

[Dependencies]
OK:
TODO: - no other Dependencies to MIR due to this
RULE:   (use tools: check-mir, seeded-in-ubuntu, reverse-depends)
TODO: - no -dev/-debug/-doc packages that need exclusion
TODO: - No dependencies in main that are only superficially tested requiring
TODO:   more tests now?

TODO: Problems:

[Embedded sources and static linking]
RULE: - Embedding a library source increases the maintenance burden of a package
RULE:   since that source needs to be maintained separately from the source in
RULE:   the Ubuntu archive. If a source embeds another package, in general the
RULE:   embedded package should not be used and the packaging should be modified
RULE:   to use the Ubuntu archive version. When this is not possible, the
RULE:   security team must agree to using the embedded source.
RULE: - Similarly, when a binary from one source package statically links to
RULE:   libraries from another source package from the archive, when those
RULE:   libraries are updated the statically linked binaries must be rebuilt
RULE:   with the updated libraries to receive the fix, which increases the
RULE:   maintenance burden. For this reason, static linking in archive builds
RULE:   is discouraged unless static linking is required for the package in
RULE:   question to function correctly (e.g. an integrity scanner).
RULE: - Does debian/control use `Built-Using`? This may indicate static linking
RULES:  which should be discouraged (excepting golang, see below)

OK:
TODO: - no embedded source present
TODO: - no static linking
TODO: - does not have odd Built-Using entries

RULE: Golang
RULE: - golang 1.4 packages and earlier could only statically compile their
RULE:   binaries. golang 1.5 in Ubuntu 16.10 introduced `-buildmode=shared`
RULE:   to build shared libraries and `-linkshared` to dynamically link against
RULE:   shared libraries. In general, statically compiled binaries are not
RULE:   suitable for the Ubuntu archive because they increase the maintenance
RULE:   burden significantly. As such, from Ubuntu 16.10 and later, golang
RULE:   packages packages in main were expected to be built with shared
RULE:   libraries.
RULE: - Evaluating cost/benefits while considering the ABI instability of golang
RULE:   libraries during this period, the MIR team decided for 17.10 and later
RULE:   to allow static builds of golang packages in main, so long as the number
RULE:   of these packages remains low and they follow the guidelines below:
RULE:   - golang applications in main are expected:
RULE:       1. to build using `golang-*-dev` packages from the Ubuntu archive
RULE:          with `Built-Using` in debian/control. This requirement ensures
RULE:          that the security team is able to track security issues for all
RULE:          affected static binary packages
RULE:       2. not to build any vendored (i.e. embedded) code in the source
RULE:          package whose binaries appear in the archive (e.g. test code is
RULE:          ok) without clear justification from the requesting team and
RULE:          approval from the security team. This requirement ensures that
RULE:          the security team is able to track security issues for all
RULE:          affected source packages.
RULE:       3. only build against approved vendored sources (when applicable)
RULE:          and not build against newly added vendored code in subsequent
RULE:          Ubuntu uploads without approval from the security team. This
RULE:          requirement ensures that the security team is able to track
RULE:          security issues for all affected source packages.
RULE: - The intended outcomes from the above requirements (if not vendored) are
RULE:   for packages in main to standardize on particular versions of
RULE:   `golang-*-dev` packages (when possible) with the requesting team
RULE:    adjusting their packaging as necessary, all teams responsible for
RULE:    golang packages coordinating on transitions and the requesting team
RULE:    occasionally creating new `golang-*-dev` packages as agreed to in the
RULE:    MIR bug (upstreaming to Debian whenever possible).
RULE: - As a practical matter, golang source packages in main are not required
RULE:   to remove unused embedded code copies.
RULE: - If based on the above options it's a statically compiled golang package:
RULE:   - Does the package use dh-golang (if not, suggest dh-make-golang to
RULE:     create the package)?
RULE:   - Does debian/control use `Built-Using: ${misc:Built-Using}` for each
RULE:     non'-dev' binary package (importantly, golang-*-dev packages only
RULE:     ship source files so don't need Built-Using)?
RULE:   - Does the package follow
RULE:     [[http://pkg-go.alioth.debian.org/packaging.html|Debian Go packaging]]
RULE:     guidelines?
RULE: - When it is infeasible to comply with this policy, the justification,
RULE:   discussion and approval should all be clearly represented in the bug.

OK:
TODO: - not a go package, no extra constraints to consider in that regard
TODO: - go package, extra constraints to consider
TODO:   - Go Package that follows the Debian Go packaging guidelines
TODO:   - vendoring is used, but the reasoning is sufficiently explained
TODO:   - No vendoring used, all Built-Using are in main
TODO:   - golang: shared builds
TODO:   - golang: static builds are used, the team confirmed their commitment
TODO:     to the additional responsibilities implied by static builds.

TODO: Problems:

[Security]
RULE: - Determine if the package may have security implications (has a history
RULE:   of CVEs, runs a daemon as root, uses webkit^1,2^, uses lib*v8 directly,
RULE:   parses data formats, opens a port, processes arbitrary web content, uses
RULE:   centralized online accounts, integrates arbitrary javascript into the
RULE:   desktop, deals with system authentication (e.g. pam), etc).
RULE:   Err on the side of caution.
RULE: - If the package is security sensitive, you should review as much as you
RULE:   can and then assign to the ubuntu-security team. The bug will then be
RULE:   added to the prioritized list of MIR security reviews.

OK:
TODO: - history of CVEs does not look concerning
TODO: - does not run a daemon as root
TODO: - does not use webkit1,2
TODO: - does not use lib*v8 directly
TODO: - does not parse data formats
TODO: - does not open a port
TODO: - does not process arbitrary web content
TODO: - does not use centralized online accounts
TODO: - does not integrate arbitrary javascript into the desktop
TODO: - does not deal with system authentication (eg, pam), etc)

TODO: Problems:

[Common blockers]
RULE: - Does it FTBFS currently?
RULE: - Plenty of testing requirements, see "Quality assurance" section of the
RULE:   Main Inclusion requirements
RULE: - Does it have a team bug subscriber? (This is not a blocker for a MIR
RULE:   team ACK, but needs to be provided before the package can be promoted
RULE:   by an AA)
RULE: - If it's a Python package, does it use dh_python?
RULE: - If it's a Python package on the CD/Image, will it pull in Python 2?

OK:
TODO: - does not FTBFS currently
TODO: - does have a test suite that runs at build time
TODO:   - test suite fails will fail the build upon error.
TODO: - does have a non-trivial test suite that runs as autopkgtest
TODO: - if special HW does prevent build/autopkgtest is there a test plan, code,
TODO:   log provided?
TODO: - if a non-trivial test on this level does not make sense (the lib alone
TODO:   is only doing rather simple things), is the overall solution (app+libs)
TODO:   extensively covered i.e. via end to end autopkgtest ?
TODO: - no translation present, but none needed for this case (user visible)?
TODO: - no new python2 dependency
TODO: - Python package that is using dh_python
TODO: - Go package that uses dh-golang

TODO: Problems:

[Packaging red flags]
RULE: - Does Ubuntu carry a non necesary delta?
RULE: - If it's a library, does it either have a symbols file or use an empty
RULE:   argument to dh_makeshlibs -V?  (pass such a patch on to Debian, but
RULE:   don't block on it).  Note that for C++, see [[DailyRelease/FAQ]] for a
RULE:   method to demangle C++ symbols files.
RULE: - Does it have a watch file? (If relevant, e.g. non-native)
RULE: - Is its update history slow or sporadic?
RULE: - Is the current release packaged?
RULE: - Will entering main make it harder for the people currently keeping it
RULE:   up to date?  (i.e. are they only MOTUs?)
RULE: - Lintian warnings
RULE: - Is debian/rules a mess?  Ideally it uses dh and overrides to make it as
RULE:   tiny as possible.
RULE: - If a package shall be promoted it should NOT be on the lto-disabled
RULE:   list, but the fix, or the work-around should be directly in the package
RULE:   to enforce maintainer awareness and make it more visible to anyone
RULE:   looking at the package - see https://wiki.ubuntu.com/ToolChain/LTO.

OK:
TODO: - Ubuntu does not carry a delta
TODO: - Ubuntu does carry a delta, but it is reasonable and maintenance under
TODO:   control
TODO: - symbols tracking is in place
TODO: - symbols tracking not applicable for this kind of code.
TODO: - d/watch is present and looks ok (if needed, e.g. non-native)
TODO: - Upstream update history is (good/slow/sporadic)
TODO: - Debian/Ubuntu update history is (good/slow/sporadic)
TODO: - the current release is packaged
TODO: - promoting this does not seem to cause issues for MOTUs that so far
TODO:   maintained the package
TODO: - no massive Lintian warnings
TODO: - d/rules is rather clean
TODO: - It is not on the lto-disabled list
RULE:   (fix, or the work-around should be directly in the package,
RULE:    see https://launchpad.net/ubuntu/+source/lto-disabled-list)

TODO: Problems:

[Upstream red flags]
RULE: flag common issues like:
RULE: - Errors/warnings during the build
RULE: - Incautious use of malloc/sprintf
RULE: - Uses of sudo, gksu, pkexec, or LD_LIBRARY_PATH (OK to be used in tests)
RULE: - User nobody is strictly for NFS's use and must not be used by any
RULE:   running processes on the system.
RULE: - Use of setuid needs very careful design (prefer systemd to set those
RULE:   for services)
RULE: - Important bugs (crashers, etc) in Debian or Ubuntu
RULE: - Dependency on webkit, qtwebkit, seed or libgoa-*
RULE: - Embedded source copies (this happens frequently with Go upstreams)
RULE: - if you see anything else odd, speak up and ask for clarification

OK:
TODO: - no Errors/warnings during the build
TODO: - no incautious use of malloc/sprintf (as far as I can check it)
TODO: - no use of sudo, gksu, pkexec, or LD_LIBRARY_PATH (usage is OK inside
TODO:   tests)
TODO: - no use of user nobody
TODO: - no use of setuid
TODO: - no important open bugs (crashers, etc) in Debian or Ubuntu
TODO: - no dependency on webkit, qtwebkit, seed or libgoa-*
TODO: - not part of the UI for extra checks

TODO: Problems:
}}}


== MIR Team weekly status meeting ==

The MIR Team holds weekly meetings on Tuesdays, at 4.30 PM CET, in #ubuntu-meeting.

If you're chairing the meeting, you can the following meetingology template:

{{{
#startmeeting Weekly Main Inclusion Requests status

Use the #action command to note something for someone to do (optional)

#topic Review of previous action items

#topic current component mismatches
#link https://people.canonical.com/~ubuntu-archive/component-mismatches-proposed.svg
#link https://people.canonical.com/~ubuntu-archive/component-mismatches.svg

#topic New MIRs

#link https://bugs.launchpad.net/ubuntu/?field.searchtext=&orderby=-date_last_updated&field.status%3Alist=NEW&field.status%3Alist=CONFIRMED&assignee_option=none&field.assignee=&field.subscriber=ubuntu-mir

#topic Incomplete bugs / questions

#link https://bugs.launchpad.net/ubuntu/?field.searchtext=&orderby=-date_last_updated&field.status%3Alist=INCOMPLETE_WITH_RESPONSE&field.status%3Alist=INCOMPLETE_WITHOUT_RESPONSE&field.subscriber=ubuntu-mir

#topic Any other business?

#endmeeting
}}}

The meeting is meant to help to facilitate

 * a fair share of work for each of us
 * a timely response to reporters of MIR requests
 * detection and discussion of any current or complex cases

Due to the nature of this process there are times when this is very
busy and the meeting is strongly needed.
But there are other times (e.g. at the beginning of a new release)
where not a lot is happening.
In such "idle" phases the leader of the meeting can pre-check the
links we usually check together and skip steps of the agenda quoting
that a pre-check has not shown anything worth to discuss.

From there we can then go rather directly to "Any other business?"
which serves as a catch all for all attendees.
By that we can make the meeting more efficient in those times, instead
of filing a monologue-log every week.

== MIR related helpers ==

=== Tools ===

 * `check-mir` can be run from a checked out source and tell you which dependencies are in universe.
 * `seeded-in-ubuntu PACKAGE` can tell you whether and how a given PACKAGE is seeded
 * `reverse-depends` can tell you reverse source or binary depends, per component
 * The [[http://people.canonical.com/~ubuntu-archive/component-mismatches.svg|component mismatch map]]

=== Making Life Easier for Archive Team Members ===

To help prevent promotion of packages that cause component mismatches, we can do two things:

 1. Run `check-mir` and make sure that all dependencies have a MIR.  We don't want to be surprised by a dependency after a package is promoted.
 1. List all distinct binary packages that should be promoted.  Often a source package will have binary packages that aren't actually needed in main.  Things like `-doc`, `-autopilot` or `-dbgsym`.  These can stay in universe, and it is a kindness to list only the packages we need for the archive team member that does the promotion. 
 1. Recommend the owning team to add their corresponding team bug subscriber during the MIR process.

=== Bug Lists ===

 * [[https://bugs.launchpad.net/~ubuntu-mir|All MIR bugs]]
 * [[https://bugs.launchpad.net/~ubuntu-mir/+bugs?field.searchtext=&orderby=-importance&search=Search&field.status%3Alist=NEW&field.status%3Alist=CONFIRMED&field.status%3Alist=TRIAGED&field.status%3Alist=INPROGRESS&field.status%3Alist=INCOMPLETE_WITH_RESPONSE&field.status%3Alist=INCOMPLETE_WITHOUT_RESPONSE|All open MIR bugs]]
 * [[https://bugs.launchpad.net/ubuntu/?field.searchtext=&orderby=-date_last_updated&field.status%3Alist=NEW&field.status%3Alist=CONFIRMED&assignee_option=none&field.assignee=&field.subscriber=ubuntu-mir|All open unclaimed MIR bugs]]
 * [[https://bugs.launchpad.net/ubuntu/?field.searchtext=&orderby=-importance&field.status%3Alist=INCOMPLETE_WITH_RESPONSE&field.status%3Alist=INCOMPLETE_WITHOUT_RESPONSE&assignee_option=any&field.assignee=&field.bug_reporter=&field.bug_commenter=&field.subscriber=ubuntu-mir&field.structural_subscriber=&field.component-empty-marker=1&field.tag=&field.tags_combinator=ANY&field.status_upstream-empty-marker=1|All incomplete MIR bugs]]
 * [[https://bugs.launchpad.net/%7Eubuntu-mir/+bugs?field.searchtext=&orderby=-importance&search=Search&field.status%3Alist=NEW&field.status%3Alist=CONFIRMED&field.status%3Alist=TRIAGED&field.status%3Alist=INPROGRESS&field.status%3Alist=FIXCOMMITTED&field.status%3Alist=INCOMPLETE_WITH_RESPONSE&field.status%3Alist=INCOMPLETE_WITHOUT_RESPONSE&assignee_option=choose&field.assignee=ubuntu-security&field.bug_reporter=&field.bug_commenter=&field.subscriber=ubuntu-mir&field.structural_subscriber=&field.tag=&field.tags_combinator=ANY&field.status_upstream-empty-marker=1&field.has_cve.used=&field.omit_dupes.used=&field.omit_dupes=on&field.affects_me.used=&field.has_patch.used=&field.has_branches.used=&field.has_branches=on&field.has_no_branches.used=&field.has_no_branches=on&field.has_blueprints.used=&field.has_blueprints=on&field.has_no_blueprints.used=&field.has_no_blueprints=on|All MIR bugs where the security team is assigned]]

